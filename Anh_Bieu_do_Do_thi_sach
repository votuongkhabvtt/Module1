<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Biểu đồ theo dõi tiến bộ thể lực</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 1100px;
            width: 100%;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        h1 {
            color: #2c3e50;
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .subtitle {
            color: #7f8c8d;
            font-size: 16px;
        }
        
        .chart-container {
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
        }
        
        .chart-wrapper {
            flex: 2;
            min-width: 500px;
            position: relative;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.05);
        }
        
        .info-panel {
            flex: 1;
            min-width: 300px;
            background: linear-gradient(to bottom right, #3498db, #2c3e50);
            border-radius: 10px;
            padding: 25px;
            color: white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .info-panel h3 {
            margin-bottom: 20px;
            font-size: 20px;
            border-bottom: 2px solid rgba(255, 255, 255, 0.3);
            padding-bottom: 10px;
        }
        
        .info-panel ul {
            list-style-type: none;
        }
        
        .info-panel li {
            margin-bottom: 15px;
            padding-left: 25px;
            position: relative;
            line-height: 1.5;
        }
        
        .info-panel li:before {
            content: "•";
            position: absolute;
            left: 10px;
            color: #2ecc71;
            font-size: 20px;
        }
        
        .legend {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 25px;
            padding: 15px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .legend-item:hover {
            transform: translateY(-2px);
        }
        
        .legend-color {
            width: 18px;
            height: 18px;
            border-radius: 4px;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
        }
        
        button {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        }
        
        button:hover {
            background: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }
        
        @media (max-width: 768px) {
            .chart-container {
                flex-direction: column;
            }
            
            .chart-wrapper {
                min-width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>BIỂU ĐỒ THEO DÕI TIẾN BỘ THỂ LỰC</h1>
            <p class="subtitle">Theo dõi sự phát triển của các tố chất thể lực qua các lần đánh giá</p>
        </header>
        
        <div class="chart-container">
            <div class="chart-wrapper">
                <canvas id="fitnessChart" width="700" height="400"></canvas>
                
                <div class="legend">
                    <div class="legend-item" data-index="0">
                        <div class="legend-color" style="background-color: #e74c3c;"></div>
                        <span>Sức mạnh</span>
                    </div>
                    <div class="legend-item" data-index="1">
                        <div class="legend-color" style="background-color: #3498db;"></div>
                        <span>Sức bền</span>
                    </div>
                    <div class="legend-item" data-index="2">
                        <div class="legend-color" style="background-color: #2ecc71;"></div>
                        <span>Tốc độ</span>
                    </div>
                    <div class="legend-item" data-index="3">
                        <div class="legend-color" style="background-color: #f39c12;"></div>
                        <span>Khéo léo</span>
                    </div>
                    <div class="legend-item" data-index="4">
                        <div class="legend-color" style="background-color: #9b59b6;"></div>
                        <span>Linh hoạt</span>
                    </div>
                    <div class="legend-item" data-index="5">
                        <div class="legend-color" style="background-color: #1abc9c;"></div>
                        <span>Thăng bằng</span>
                    </div>
                </div>
                
                <div class="controls">
                    <button id="toggleLines">Ẩn/Hiện tất cả</button>
                    <button id="resetView">Đặt lại chế độ xem</button>
                </div>
            </div>
            
            <div class="info-panel">
                <h3>NHẬN XÉT & MỤC TIẾU TIẾP THEO</h3>
                <ul>
                    <li><strong>Điểm mạnh:</strong> Sức bền và Tốc độ cải thiện vượt bậc qua các lần đánh giá.</li>
                    <li><strong>Cần duy trì:</strong> Khéo léo và Thăng bằng đang ở mức tốt, cần duy trì.</li>
                    <li><strong>Mục tiêu:</strong> Tập trung vào Linh hoạt và Sức mạnh tối đa trong giai đoạn tới.</li>
                    <li><strong>Tiến bộ tổng thể:</strong> Tăng 22% so với lần đánh giá đầu tiên.</li>
                    <li><strong>Khuyến nghị:</strong> Duy trì chế độ tập luyện hiện tại, tăng cường bài tập linh hoạt khớp và sức mạnh cơ bắp.</li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        // Lớp đối tượng cho biểu đồ thể lực
        class FitnessLineChart {
            constructor(canvasId, data) {
                this.canvas = document.getElementById(canvasId);
                this.ctx = this.canvas.getContext('2d');
                this.data = data;
                this.colors = [
                    '#e74c3c', // Sức mạnh - Đỏ
                    '#3498db', // Sức bền - Xanh dương
                    '#2ecc71', // Tốc độ - Xanh lá
                    '#f39c12', // Khéo léo - Cam
                    '#9b59b6', // Linh hoạt - Tím
                    '#1abc9c'  // Thăng bằng - Xanh ngọc
                ];
                
                // Trạng thái hiển thị của các đường
                this.visibleLines = Array(this.data.datasets.length).fill(true);
                
                // Kích thước và padding
                this.padding = { top: 40, right: 40, bottom: 60, left: 60 };
                this.chartWidth = this.canvas.width - this.padding.left - this.padding.right;
                this.chartHeight = this.canvas.height - this.padding.top - this.padding.bottom;
                
                // Tính toán tỷ lệ
                this.xScale = this.chartWidth / (this.data.labels.length - 1);
                this.yScale = this.chartHeight / 100; // Vì điểm số từ 0-100
                
                this.initEventListeners();
                this.draw();
            }
            
            // Vẽ lưới và hệ trục
            drawGrid() {
                this.ctx.strokeStyle = '#e0e0e0';
                this.ctx.lineWidth = 1;
                this.ctx.textAlign = 'center';
                this.ctx.textBaseline = 'middle';
                this.ctx.font = '12px Arial';
                this.ctx.fillStyle = '#7f8c8d';
                
                // Vẽ đường ngang và nhãn trục Y
                for (let i = 0; i <= 5; i++) {
                    const y = this.padding.top + (this.chartHeight / 5) * i;
                    const value = 100 - i * 20;
                    
                    // Đường ngang
                    this.ctx.beginPath();
                    this.ctx.moveTo(this.padding.left, y);
                    this.ctx.lineTo(this.padding.left + this.chartWidth, y);
                    this.ctx.stroke();
                    
                    // Nhãn trục Y
                    this.ctx.fillText(value, this.padding.left - 20, y);
                }
                
                // Vẽ đường dọc và nhãn trục X
                for (let i = 0; i < this.data.labels.length; i++) {
                    const x = this.padding.left + this.xScale * i;
                    
                    // Đường dọc
                    this.ctx.beginPath();
                    this.ctx.moveTo(x, this.padding.top);
                    this.ctx.lineTo(x, this.padding.top + this.chartHeight);
                    this.ctx.stroke();
                    
                    // Nhãn trục X
                    this.ctx.save();
                    this.ctx.translate(x, this.padding.top + this.chartHeight + 20);
                    this.ctx.rotate(-Math.PI / 4);
                    this.ctx.textAlign = 'right';
                    this.ctx.fillText(this.data.labels[i], 0, 0);
                    this.ctx.restore();
                }
                
                // Vẽ trục X và Y
                this.ctx.strokeStyle = '#34495e';
                this.ctx.lineWidth = 2;
                
                // Trục Y
                this.ctx.beginPath();
                this.ctx.moveTo(this.padding.left, this.padding.top);
                this.ctx.lineTo(this.padding.left, this.padding.top + this.chartHeight);
                this.ctx.stroke();
                
                // Trục X
                this.ctx.beginPath();
                this.ctx.moveTo(this.padding.left, this.padding.top + this.chartHeight);
                this.ctx.lineTo(this.padding.left + this.chartWidth, this.padding.top + this.chartHeight);
                this.ctx.stroke();
                
                // Thêm tiêu đề trục
                this.ctx.fillStyle = '#2c3e50';
                this.ctx.font = 'bold 14px Arial';
                this.ctx.textAlign = 'center';
                this.ctx.fillText('Điểm số chuẩn hóa (%)', this.padding.left - 40, this.padding.top / 2);
                this.ctx.fillText('Thời gian (các lần test)', this.padding.left + this.chartWidth / 2, this.padding.top + this.chartHeight + 40);
            }
            
            // Vẽ một đường dữ liệu
            drawLine(dataset, color, index) {
                if (!this.visibleLines[index]) return;
                
                this.ctx.beginPath();
                this.ctx.strokeStyle = color;
                this.ctx.lineWidth = 3;
                this.ctx.lineJoin = 'round';
                
                for (let i = 0; i < dataset.length; i++) {
                    const x = this.padding.left + this.xScale * i;
                    const y = this.padding.top + this.chartHeight - (dataset[i] * this.yScale);
                    
                    if (i === 0) {
                        this.ctx.moveTo(x, y);
                    } else {
                        this.ctx.lineTo(x, y);
                    }
                }
                
                this.ctx.stroke();
                
                // Vẽ điểm dữ liệu
                for (let i = 0; i < dataset.length; i++) {
                    const x = this.padding.left + this.xScale * i;
                    const y = this.padding.top + this.chartHeight - (dataset[i] * this.yScale);
                    
                    this.ctx.fillStyle = color;
                    this.ctx.beginPath();
                    this.ctx.arc(x, y, 5, 0, Math.PI * 2);
                    this.ctx.fill();
                    
                    // Thêm giá trị tại điểm
                    this.ctx.fillStyle = '#2c3e50';
                    this.ctx.font = '12px Arial';
                    this.ctx.textAlign = 'center';
                    this.ctx.fillText(dataset[i], x, y - 15);
                }
            }
            
            // Vẽ toàn bộ biểu đồ
            draw() {
                // Xóa canvas
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                
                // Vẽ lưới và hệ trục
                this.drawGrid();
                
                // Vẽ các đường dữ liệu
                for (let i = 0; i < this.data.datasets.length; i++) {
                    this.drawLine(this.data.datasets[i], this.colors[i], i);
                }
            }
            
            // Khởi tạo sự kiện
            initEventListeners() {
                const legendItems = document.querySelectorAll('.legend-item');
                const toggleButton = document.getElementById('toggleLines');
                const resetButton = document.getElementById('resetView');
                
                // Sự kiện click vào chú thích
                legendItems.forEach(item => {
                    item.addEventListener('click', () => {
                        const index = parseInt(item.getAttribute('data-index'));
                        this.visibleLines[index] = !this.visibleLines[index];
                        
                        // Thay đổi độ trong suốt của chú thích
                        item.style.opacity = this.visibleLines[index] ? '1' : '0.5';
                        
                        this.draw();
                    });
                });
                
                // Sự kiện nút ẩn/hiện tất cả
                toggleButton.addEventListener('click', () => {
                    const allVisible = this.visibleLines.every(v => v);
                    
                    this.visibleLines = this.visibleLines.map(() => !allVisible);
                    
                    // Cập nhật độ trong suốt của chú thích
                    legendItems.forEach((item, index) => {
                        item.style.opacity = this.visibleLines[index] ? '1' : '0.5';
                    });
                    
                    this.draw();
                });
                
                // Sự kiện nút đặt lại
                resetButton.addEventListener('click', () => {
                    this.visibleLines = Array(this.data.datasets.length).fill(true);
                    
                    // Đặt lại độ trong suốt của chú thích
                    legendItems.forEach(item => {
                        item.style.opacity = '1';
                    });
                    
                    this.draw();
                });
            }
        }

        // Dữ liệu mẫu
        const fitnessData = {
            labels: ['Lần 1 (T1)', 'Lần 2 (T4)', 'Lần 3 (T7)', 'Lần 4 (T10)'],
            datasets: [
                [50, 65, 70, 80],   // Sức mạnh
                [60, 75, 85, 90],   // Sức bền
                [70, 80, 85, 88],   // Tốc độ
                [40, 60, 70, 75],   // Khéo léo
                [30, 45, 60, 65],   // Linh hoạt
                [80, 85, 90, 92]    // Thăng bằng
            ]
        };

        // Khởi tạo biểu đồ khi trang được tải
        window.onload = function() {
            new FitnessLineChart('fitnessChart', fitnessData);
        };
    </script>
</body>
</html>
